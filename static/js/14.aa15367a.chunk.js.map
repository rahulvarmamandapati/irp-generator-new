{"version":3,"sources":["components/pages/Page1.js","services/hooks/useFormState.js","components/SelectProfileAvatar.js"],"names":["StyledH2","styled","h2","props","theme","sansSerif","darkBlue","device","breakUp768","StyledH5","h5","StyledHr","hr","breakUp1024","Page1","React","StepperContext","state","currentPage","profile","avatars","dispatch","initState","validForm","setValidForm","emailReg","hasError","value","key","match","useFormState","name","avatar_id","setForm","isValid","id","LottieBg","lottieData","bgLottieDots","fallback","bgBlueCylinderPattern","theme1","Container","Header","className","clsx","htmlFor","type","placeholder","onChange","e","target","style","marginBottom","map","avatar","onClick","SelectProfileAvatar","selected","size","ProfileAvatar","PageControls","validate","StyledProfileImage","svg","spacing35","breakUp1440","useState","hover","setHover","overflow","onMouseEnter","onMouseLeave","xlinkHref"],"mappings":"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","file":"static/js/14.aa15367a.chunk.js","sourcesContent":["import * as React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport styled from 'styled-components/macro';\nimport clsx from 'clsx';\nimport { StepperContext } from '../../contexts/stepperContext';\nimport { device } from '../../device';\nimport { useFormState } from '../../services/hooks/useFormState';\nimport Container from '../Container';\nimport Header from '../Header';\nimport PageControls from '../PageControls';\nimport ProfileAvatar from '../ProfileAvatar';\nimport SelectProfileAvatar from '../SelectProfileAvatar';\nimport LottieBg from '../LottieBg';\nimport bgLottieDots from '../../data/bg-cylinders.json';\nimport bgBlueCylinderPattern from '../../images/bg-blue-cylinder-pattern.jpg';\nimport {\n  theme1,\n  StyledFieldSet,\n  StyledLabel,\n  StyledInput,\n  StyledP,\n} from '../../theme/globalStyle';\nimport {\n  StyledInvisButton,\n  StyledWrapper,\n  ReStyledRow,\n  ReStyledColOneThirdsMdUp,\n  ReStyledColThreeThirdsMdUp,\n  StyledAvatars,\n} from './Page.styles';\n\nconst StyledH2 = styled.h2`\n  margin-top: 0;\n  margin-bottom: 35px;\n  font-family: ${(props) => props.theme.sansSerif};\n  font-weight: bold;\n  font-style: normal;\n  font-size: 20px;\n  line-height: 24px;\n  color: ${(props) => props.theme.darkBlue};\n  @media ${device.breakUp768} {\n    font-size: 24px;\n    line-height: 28px;\n  }\n  span {\n    font-weight: normal;\n  }\n`;\n\nconst StyledH5 = styled.h5`\n  margin-top: 0;\n  margin-bottom: 35px;\n  font-family: ${(props) => props.theme.sansSerif};\n  font-weight: bold;\n  font-style: normal;\n  font-size: 20px;\n  line-height: 24px;\n  color: ${(props) => props.theme.darkBlue};\n`;\n\nconst StyledHr = styled.hr`\n  border-top: 1px solid #ebeaed;\n  margin: 30px auto;\n  @media ${device.breakUp768} {\n    margin: 50px auto;\n  }\n  @media ${device.breakUp1024} {\n    display: none;\n  }\n`;\n\nfunction Page1() {\n  const {\n    state: { currentPage, profile, avatars },\n    dispatch,\n  } = React.useContext(StepperContext);\n  const [validForm, setForm] = useFormState({\n    name: { value: '', hasError: '' },\n    avatar_id: { value: '', hasError: '' },\n  });\n  const isValid = profile.name !== '' && !!profile.avatar_id.id;\n  const validate = () => {\n    setForm('name', validForm.name.value);\n  };\n  return (\n    <>\n      <LottieBg lottieData={bgLottieDots} fallback={bgBlueCylinderPattern} />\n      <ThemeProvider theme={theme1}>\n        <Container>\n          <Header />\n          <StyledWrapper>\n            <ReStyledRow>\n              <ReStyledColThreeThirdsMdUp className=\"order-lgUp-2\">\n                <StyledH2>\n                  Step 1:\n                  {' '}\n                  <span>Select your IRP avatar.</span>\n                </StyledH2>\n                <StyledFieldSet>\n                  <StyledLabel\n                    className={clsx(validForm.name.hasError && 'hasError')}\n                    htmlFor=\"repName\"\n                  >\n                    Letâ€™s give them a name\n                    <StyledInput\n                      type=\"text\"\n                      className={clsx(validForm.name.hasError && 'hasError')}\n                      placeholder=\"Name Your Rep\"\n                      id=\"repName\"\n                      name=\"repName\"\n                      value={profile.name || ''}\n                      onChange={(e) => {\n                        setForm('name', e.target.value);\n                        dispatch({\n                          type: 'setUserProfile',\n                          profile: { name: e.target.value },\n                        });\n                      }}\n                    />\n                    {validForm.name.hasError && (\n                      <small>Oops, you forgot to give yourself a name!</small>\n                    )}\n                  </StyledLabel>\n                </StyledFieldSet>\n                <StyledFieldSet style={{ marginBottom: 0 }}>\n                  <StyledLabel style={{ marginBottom: '15px' }}>\n                    Select an Avatar\n                  </StyledLabel>\n                  <StyledAvatars>\n                    {avatars.map((avatar) => (\n                      <StyledInvisButton\n                        type=\"button\"\n                        key={avatar.id}\n                        onClick={() => {\n                          dispatch({\n                            type: 'setUserProfile',\n                            profile: { avatar_id: { id: avatar.id } },\n                          });\n                        }}\n                      >\n                        <SelectProfileAvatar\n                          id={`avatar${avatar.id}`}\n                          selected={avatar.id === profile.avatar_id.id}\n                          size=\"x120x115x135x70\"\n                        >\n                          {avatar.id}\n                        </SelectProfileAvatar>\n                      </StyledInvisButton>\n                    ))}\n                  </StyledAvatars>\n                </StyledFieldSet>\n              </ReStyledColThreeThirdsMdUp>\n              <ReStyledColOneThirdsMdUp className=\"order-lgUp-1\">\n                <StyledHr />\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <ProfileAvatar\n                      id={`avatar${profile.avatar_id.id}`}\n                      size=\"x150\"\n                    >\n                      Select an avatar\n                    </ProfileAvatar>\n                  </div>\n                  <div className=\"col\">\n                    <StyledH5 style={{ marginBottom: '20px' }}>\n                      Why is this step important?\n                    </StyledH5>\n                    <StyledP>\n                      Choosing a rep name helps you visualize your ideal rep\n                      profile. Consider giving your rep profile a fun name like\n                      Rockstar Rachel or Moneyball Mike!\n                    </StyledP>\n                  </div>\n                </div>\n              </ReStyledColOneThirdsMdUp>\n            </ReStyledRow>\n          </StyledWrapper>\n          <PageControls\n            currentPage={currentPage}\n            isValid={isValid}\n            validate={validate}\n          />\n        </Container>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default Page1;\n","import * as React from 'react';\n\nexport const useFormState = (initState) => {\n  const [validForm, setValidForm] = React.useState(initState);\n  const emailReg =\n    // eslint-disable-next-line\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const hasError = (value, key) => {\n    switch (key) {\n      case 'email':\n        return !value.match(emailReg);\n      default:\n        return value === '';\n    }\n  };\n  const setForm = (key, value) =>\n    setValidForm({\n      ...validForm,\n      [key]: {\n        ...validForm[key],\n        value,\n        hasError: hasError(value, key),\n      },\n    });\n  return [validForm, setForm];\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport clsx from 'clsx';\nimport { device } from '../device';\n\nconst StyledProfileImage = styled.svg`\n  width: 200px;\n  height: 200px;\n  margin-bottom: ${(props) => props.theme.spacing35};\n  border-radius: 100%;\n  position: relative;\n\n  &.x120 {\n    width: 120px;\n    height: 120px;\n  }\n  &.x150 {\n    width: 150px;\n    height: 150px;\n  }\n  &.x120x115x135x70 {\n    width: 73px;\n    height: 73px;\n    margin-bottom: 0;\n\n    @media ${device.breakUp768} {\n      width: 135px;\n      height: 135px;\n    }\n    @media ${device.breakUp1024} {\n      width: 115px;\n      height: 115px;\n    }\n    @media ${device.breakUp1440} {\n      width: 120px;\n      height: 120px;\n    }\n  }\n\n  &.x70 {\n    width: 70px;\n    height: 70px;\n    margin-bottom: 0;\n  }\n\n  &.x70x50 {\n    width: 50px;\n    height: 50px;\n    margin-bottom: 0;\n\n    @media ${device.breakUp1024} {\n      width: 70px;\n      height: 70px;\n    }\n  }\n\n  .label {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%);\n    text-indent: -999em;\n    user-select: none;\n    z-index: -1;\n  }\n`;\n\nfunction ProfileAvatar({ size, id, selected }) {\n  const [hover, setHover] = React.useState(false);\n  return (\n    <StyledProfileImage\n      overflow=\"auto\"\n      className={clsx('styledProfileImage', size, id, selected && 'selected')}\n      onMouseEnter={() => {\n        setHover(true);\n      }}\n      onMouseLeave={() => {\n        setHover(false);\n      }}\n    >\n      {selected && <use xlinkHref={`#${id}_hover`} />}\n      {!selected && <use xlinkHref={hover ? `#${id}_hover` : `#${id}`} />}\n    </StyledProfileImage>\n  );\n}\n\nexport default ProfileAvatar;\n"],"sourceRoot":""}